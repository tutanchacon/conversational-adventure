"""
Demo Interactivo - Adventure Game v1.1.0 con B√∫squeda Vectorial
Demuestra las nuevas capacidades de b√∫squeda sem√°ntica y an√°lisis de patrones
"""

import asyncio
import logging
from pathlib import Path
from adventure_game import IntelligentAdventureGame


class VectorSearchDemo:
    """Demo especializado para mostrar b√∫squeda vectorial"""
    
    def __init__(self):
        self.game = IntelligentAdventureGame(
            memory_db_path="vector_demo.db",
            model="llama3.2:3b"
        )
        
        # Configurar logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        
    async def run_demo(self):
        """Ejecuta demo completo de b√∫squeda vectorial"""
        
        print("=" * 70)
        print("üîç DEMO: ADVENTURE GAME v1.1.0 - B√öSQUEDA VECTORIAL")
        print("=" * 70)
        print()
        
        # Inicializar mundo
        await self.game.initialize_world()
        
        # Inicializar sistema vectorial
        print("üîÑ Inicializando b√∫squeda vectorial...")
        await self.game.mcp.initialize_vector_search()
        
        if self.game.mcp.vector_initialized:
            print("‚úÖ B√∫squeda vectorial ACTIVA")
        else:
            print("‚ùå Error: B√∫squeda vectorial no disponible")
            return
        
        print()
        
        # Poblar con m√°s objetos para mejores demos
        await self._populate_demo_world()
        
        # Mostrar estad√≠sticas
        stats = await self.game.get_world_stats()
        print(stats)
        print()
        
        # Demo 1: B√∫squeda de objetos similares
        await self._demo_similar_objects()
        
        # Demo 2: B√∫squeda por funci√≥n/categor√≠a
        await self._demo_functional_search()
        
        # Demo 3: An√°lisis de patrones
        await self._demo_pattern_analysis()
        
        # Demo 4: Recomendaciones inteligentes
        await self._demo_smart_recommendations()
        
        # Demo 5: Comparaci√≥n con sistema anterior
        await self._demo_comparison()
        
        print("\n" + "=" * 70)
        print("üéâ DEMO COMPLETADO - ¬°Explora las nuevas capacidades!")
        print("=" * 70)
        
        # Modo interactivo
        await self._interactive_mode()
    
    async def _populate_demo_world(self):
        """Puebla el mundo con objetos adicionales para mejores demos"""
        print("üèóÔ∏è Poblando mundo con objetos adicionales...")
        
        # Obtener ubicaciones existentes
        cursor = self.game.memory.db_connection.execute("SELECT id FROM locations")
        locations = [row[0] for row in cursor.fetchall()]
        
        if len(locations) < 3:
            print("‚ö†Ô∏è Necesitamos m√°s ubicaciones, creando mundo base...")
            return
        
        # Objetos de carpinter√≠a y construcci√≥n
        carpentry_objects = [
            ("sierra de mano", "Una sierra dentada para cortar madera fina", 
             {"material": "steel_wood", "type": "cutting_tool", "condition": "sharp", "use": "carpentry"}),
            ("martillo de carpintero", "Martillo espec√≠fico para trabajos de carpinter√≠a", 
             {"material": "steel_wood", "type": "hammer", "condition": "good", "use": "carpentry"}),
            ("cincel de madera", "Herramienta para tallar y dar forma a la madera", 
             {"material": "steel_wood", "type": "carving_tool", "condition": "sharp", "use": "woodworking"}),
            ("clavos de hierro", "Un pu√±ado de clavos de hierro forjado", 
             {"material": "iron", "type": "fastener", "condition": "new", "use": "construction"}),
            ("banco de trabajo", "Mesa s√≥lida de roble para trabajos de carpinter√≠a", 
             {"material": "oak", "type": "furniture", "condition": "worn", "use": "workspace"})
        ]
        
        # Objetos de cocina y utilitarios
        kitchen_objects = [
            ("cuchillo de cocina", "Cuchillo afilado para preparar alimentos", 
             {"material": "steel_wood", "type": "cutting_tool", "condition": "sharp", "use": "cooking"}),
            ("olla de hierro", "Gran olla de hierro fundido para cocinar", 
             {"material": "cast_iron", "type": "cookware", "condition": "seasoned", "use": "cooking"}),
            ("cuchar√≥n de madera", "Cuchar√≥n tallado en madera de haya", 
             {"material": "wood", "type": "utensil", "condition": "smooth", "use": "cooking"}),
            ("mortero de piedra", "Mortero de granito para moler especias", 
             {"material": "granite", "type": "grinding_tool", "condition": "polished", "use": "food_prep"})
        ]
        
        # Objetos m√°gicos y antiguos
        magical_objects = [
            ("varita de roble", "Varita m√°gica tallada en roble ancestral", 
             {"material": "enchanted_oak", "type": "magic_tool", "condition": "powerful", "use": "spellcasting"}),
            ("cristal de cuarzo", "Cristal transparente que brilla con luz interior", 
             {"material": "quartz", "type": "magic_focus", "condition": "pure", "use": "energy_channeling"}),
            ("pergamino antiguo", "Pergamino amarillento con runas desconocidas", 
             {"material": "parchment", "type": "knowledge", "condition": "fragile", "use": "spell_research"}),
            ("amuleto de protecci√≥n", "Medall√≥n de plata con s√≠mbolos protectores", 
             {"material": "silver", "type": "protection", "condition": "blessed", "use": "defense"})
        ]
        
        # Distribuir objetos en ubicaciones
        all_objects = carpentry_objects + kitchen_objects + magical_objects
        
        for i, (name, desc, props) in enumerate(all_objects):
            location = locations[i % len(locations)]
            try:
                await self.game.memory.create_object(name, desc, location, properties=props)
                print(f"  ‚úÖ {name} creado en {location}")
            except Exception as e:
                print(f"  ‚ö†Ô∏è Error creando {name}: {e}")
        
        # Re-inicializar √≠ndice vectorial con nuevos objetos
        await self.game.mcp.vector_engine.initialize_from_existing_data()
        print("‚úÖ Mundo poblado e √≠ndice vectorial actualizado")
    
    async def _demo_similar_objects(self):
        """Demo: B√∫squeda de objetos similares"""
        print("\n" + "üîç DEMO 1: B√öSQUEDA DE OBJETOS SIMILARES")
        print("-" * 50)
        
        test_queries = [
            "buscar objetos como martillo",
            "objetos parecidos a herramientas de metal",
            "buscar objetos como cuchillo"
        ]
        
        for query in test_queries:
            print(f"\nüéØ Consulta: '{query}'")
            print("-" * 30)
            
            response = await self.game.process_command_async(query)
            print(response)
            
            await asyncio.sleep(1)  # Pausa para mejor visualizaci√≥n
    
    async def _demo_functional_search(self):
        """Demo: B√∫squeda por funci√≥n/categor√≠a"""
        print("\n" + "üõ†Ô∏è DEMO 2: B√öSQUEDA POR FUNCI√ìN/CATEGOR√çA")
        print("-" * 50)
        
        test_queries = [
            "buscar herramientas de carpinter√≠a",
            "buscar herramientas para cocinar",
            "buscar objetos m√°gicos"
        ]
        
        for query in test_queries:
            print(f"\nüéØ Consulta: '{query}'")
            print("-" * 30)
            
            response = await self.game.process_command_async(query)
            print(response)
            
            await asyncio.sleep(1)
    
    async def _demo_pattern_analysis(self):
        """Demo: An√°lisis de patrones de ubicaci√≥n"""
        print("\n" + "üìä DEMO 3: AN√ÅLISIS DE PATRONES")
        print("-" * 50)
        
        # Mover algunos objetos para crear patrones
        print("üîÑ Preparando escenario de patrones...")
        
        # Simular que el jugador mueve objetos relacionados
        await self.game.process_command_async("tomar martillo")
        await self.game.process_command_async("ir norte")
        await self.game.process_command_async("dejar martillo")
        await self.game.process_command_async("tomar sierra")
        await self.game.process_command_async("dejar sierra")
        
        print("\nüéØ Analizando patrones en ubicaci√≥n actual...")
        response = await self.game.process_command_async("analizar patrones aqu√≠")
        print(response)
    
    async def _demo_smart_recommendations(self):
        """Demo: Recomendaciones inteligentes"""
        print("\n" + "üí° DEMO 4: RECOMENDACIONES INTELIGENTES")
        print("-" * 50)
        
        # Tomar algunos objetos para generar contexto
        await self.game.process_command_async("tomar martillo de carpintero")
        
        print("üéØ Solicitando recomendaciones basadas en inventario...")
        response = await self.game.process_command_async("recomendar objetos")
        print(response)
    
    async def _demo_comparison(self):
        """Demo: Comparaci√≥n con sistema anterior"""
        print("\n" + "‚öñÔ∏è DEMO 5: COMPARACI√ìN ANTES vs DESPU√âS")
        print("-" * 50)
        
        print("üîç ANTES (v1.0.0): B√∫squeda b√°sica por nombre exacto")
        print("   ‚ùå Solo encuentra objetos con nombres exactos")
        print("   ‚ùå No comprende sin√≥nimos o similitudes")
        print("   ‚ùå No puede buscar por funci√≥n o categor√≠a")
        
        print("\nüîç DESPU√âS (v1.1.0): B√∫squeda sem√°ntica avanzada")
        print("   ‚úÖ Comprende similitudes conceptuales")
        print("   ‚úÖ Busca por funci√≥n: 'herramientas de carpinter√≠a'")
        print("   ‚úÖ Encuentra objetos relacionados autom√°ticamente")
        print("   ‚úÖ Analiza patrones de uso y ubicaci√≥n")
        
        print("\nüéØ Ejemplo pr√°ctico:")
        print("   B√∫squeda: 'herramientas para cortar'")
        
        response = await self.game.process_command_async("buscar herramientas para cortar")
        print("\nüìä Resultado con IA sem√°ntica:")
        print(response)
    
    async def _interactive_mode(self):
        """Modo interactivo para probar b√∫squedas"""
        print("\n" + "üéÆ MODO INTERACTIVO - PRUEBA LAS NUEVAS CAPACIDADES")
        print("-" * 60)
        print("Comandos especiales disponibles:")
        print("  ‚Ä¢ 'buscar objetos como X' - Encuentra objetos similares")
        print("  ‚Ä¢ 'buscar herramientas de Y' - Busca por funci√≥n")
        print("  ‚Ä¢ 'analizar patrones aqu√≠' - Analiza ubicaci√≥n actual")
        print("  ‚Ä¢ 'recomendar objetos' - Sugerencias inteligentes")
        print("  ‚Ä¢ 'stats' - Ver estad√≠sticas del sistema")
        print("  ‚Ä¢ 'salir' - Terminar demo")
        print()
        
        while True:
            try:
                command = input("üéÆ Comando: ").strip()
                
                if command.lower() in ['salir', 'exit', 'quit']:
                    break
                
                if command.lower() == 'stats':
                    stats = await self.game.get_world_stats()
                    print(stats)
                    continue
                
                if not command:
                    continue
                
                print("\nü§ñ Procesando...")
                response = await self.game.process_command_async(command)
                print(f"\nüìñ Respuesta:\n{response}")
                print("-" * 50)
                
            except KeyboardInterrupt:
                print("\n\nüëã Demo terminado por el usuario")
                break
            except Exception as e:
                print(f"\n‚ùå Error: {e}")
                continue
    
    async def close(self):
        """Cierra el demo"""
        await self.game.close()


async def main():
    """Funci√≥n principal del demo"""
    demo = VectorSearchDemo()
    
    try:
        await demo.run_demo()
    except KeyboardInterrupt:
        print("\n\nüõë Demo interrumpido")
    except Exception as e:
        print(f"\n‚ùå Error en demo: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await demo.close()


if __name__ == "__main__":
    print("üöÄ Iniciando Demo de B√∫squeda Vectorial...")
    
    # Verificar dependencias
    try:
        import chromadb
        import sentence_transformers
        print("‚úÖ Dependencias vectoriales disponibles")
    except ImportError as e:
        print(f"‚ùå Dependencia faltante: {e}")
        print("üì¶ Instala con: pip install chromadb sentence-transformers")
        exit(1)
    
    asyncio.run(main())
