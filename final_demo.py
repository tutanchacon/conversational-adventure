# Demostraci√≥n Final del Sistema de Memoria Perfecta
# Este script demuestra que el martillo NUNCA se olvida

import asyncio
import os
from datetime import datetime
from adventure_game import IntelligentAdventureGame

class FinalDemo:
    def __init__(self):
        self.db_name = "final_demo_world.db"
        self.game = None
    
    async def reset_world_if_needed(self):
        """Pregunta si resetear el mundo o continuar"""
        if os.path.exists(self.db_name):
            print("üåç Mundo existente detectado")
            choice = input("¬øQuieres (c)ontinuar el mundo existente o (r)eset? [c/r]: ").lower()
            if choice == 'r':
                os.remove(self.db_name)
                print("üóëÔ∏è Mundo reseteado")
            else:
                print("üìñ Cargando mundo existente...")
    
    async def demo_session_1(self):
        """Primera sesi√≥n: crear y mover objetos"""
        print("\n" + "=" * 60)
        print("üìÖ SESI√ìN 1: Creando el mundo y moviendo objetos")
        print("=" * 60)
        
        self.game = IntelligentAdventureGame(self.db_name, model="mock")
        # Usar IA simulada para demo
        self.game.ollama = MockOllamaForDemo()
        
        commands = [
            "mirar alrededor",
            "examinar la llave oxidada",
            "tomar la llave oxidada",
            "ir al norte",
            "ir al oeste", 
            "examinar el martillo del herrero",
            "tomar el martillo del herrero",
            "ir al este",
            "ir al este",
            "dejar el martillo del herrero en la biblioteca",
            "ir al oeste",
            "ir al sur",
            "dejar la llave oxidada en la entrada"
        ]
        
        print("üéØ Ejecutando comandos de la primera sesi√≥n...")
        for i, command in enumerate(commands, 1):
            print(f"\n[{i:2d}] üó£Ô∏è {command}")
            response = await self.game.process_command_async(command)
            print(f"     üéÆ {response[:100]}{'...' if len(response) > 100 else ''}")
            await asyncio.sleep(0.2)
        
        # Mostrar estado final de la sesi√≥n 1
        stats = await self.game.get_world_stats()
        print(f"\nüìä Estado al final de la sesi√≥n 1:")
        print(f"   Eventos registrados: {stats.split('Eventos registrados: ')[1].split()[0]}")
        
        await self.game.close()
        print("üíæ Sesi√≥n 1 completada y guardada")
    
    async def demo_session_2(self):
        """Segunda sesi√≥n: verificar persistencia"""
        print("\n" + "=" * 60)
        print("üìÖ SESI√ìN 2: Verificando persistencia (simulando d√≠as despu√©s)")
        print("=" * 60)
        
        print("üï∞Ô∏è Reconectando al mundo guardado...")
        self.game = IntelligentAdventureGame(self.db_name, model="mock")
        self.game.ollama = MockOllamaForDemo()
        
        # Simular que ha pasado tiempo - oxidar objetos
        print("‚è∞ Simulando el paso del tiempo...")
        
        # Encontrar objetos y oxidarlos
        objects = await self.game.memory.get_objects_in_location("inventory_player")
        all_locations = ["entrada", "biblioteca", "cocina", "hall_principal"]
        
        # Buscar todos los objetos para oxidarlos
        for location_id in all_locations:
            cursor = self.game.memory.db_connection.execute("""
                SELECT id FROM locations WHERE name LIKE ?
            """, (f"%{location_id}%",))
            rows = cursor.fetchall()
            for row in rows:
                location_objects = await self.game.memory.get_objects_in_location(row[0])
                for obj in location_objects:
                    if "rust_level" in obj.properties:
                        new_rust = min(obj.properties.get("rust_level", 0) + 2, 5)
                        await self.game.memory.modify_object_properties(
                            obj.id,
                            {"rust_level": new_rust, "condition": "more_rusty"},
                            actor="time"
                        )
        
        commands = [
            "mirar alrededor",
            "ir al norte", 
            "ir al este",
            "mirar alrededor",  # ¬øEst√° el martillo aqu√≠?
            "examinar el martillo del herrero",
            "tomar el martillo del herrero",
            "ir al oeste",
            "ir al sur", 
            "mirar alrededor",  # ¬øEst√° la llave aqu√≠?
            "examinar la llave oxidada",
            "inventario"
        ]
        
        print("üîç Verificando que los objetos siguen donde los dejamos...")
        for i, command in enumerate(commands, 1):
            print(f"\n[{i:2d}] üó£Ô∏è {command}")
            response = await self.game.process_command_async(command)
            print(f"     üéÆ {response[:100]}{'...' if len(response) > 100 else ''}")
            await asyncio.sleep(0.2)
        
        await self.game.close()
        print("‚úÖ Sesi√≥n 2 completada")
    
    async def show_memory_analysis(self):
        """Muestra an√°lisis detallado de la memoria"""
        print("\n" + "=" * 60)
        print("üß† AN√ÅLISIS DE MEMORIA PERFECTA")
        print("=" * 60)
        
        self.game = IntelligentAdventureGame(self.db_name, model="mock")
        
        # Estad√≠sticas generales
        stats = await self.game.get_world_stats()
        print(f"\nüìä ESTAD√çSTICAS GENERALES:")
        print(stats)
        
        # Historial de objetos espec√≠ficos
        print(f"\nüî® HISTORIAL DEL MARTILLO:")
        
        # Buscar el martillo
        cursor = self.game.memory.db_connection.execute("""
            SELECT id, name, location_id, properties FROM game_objects 
            WHERE name LIKE '%martillo%'
        """)
        
        martillo_row = cursor.fetchone()
        if martillo_row:
            martillo_id = martillo_row[0]
            print(f"   ID: {martillo_id}")
            print(f"   Ubicaci√≥n actual: {martillo_row[2]}")
            print(f"   Propiedades: {martillo_row[3]}")
            
            history = await self.game.memory.get_object_history(martillo_id)
            print(f"\n   üìú Eventos del martillo ({len(history)} total):")
            for event in history:
                timestamp = event.timestamp.strftime("%H:%M:%S")
                print(f"      {timestamp}: {event.action}")
        
        # Buscar la llave
        print(f"\nüóùÔ∏è HISTORIAL DE LA LLAVE:")
        cursor = self.game.memory.db_connection.execute("""
            SELECT id, name, location_id, properties FROM game_objects 
            WHERE name LIKE '%llave%'
        """)
        
        llave_row = cursor.fetchone()
        if llave_row:
            llave_id = llave_row[0]
            print(f"   ID: {llave_id}")
            print(f"   Ubicaci√≥n actual: {llave_row[2]}")
            print(f"   Propiedades: {llave_row[3]}")
            
            history = await self.game.memory.get_object_history(llave_id)
            print(f"\n   üìú Eventos de la llave ({len(history)} total):")
            for event in history:
                timestamp = event.timestamp.strftime("%H:%M:%S")
                print(f"      {timestamp}: {event.action}")
        
        await self.game.close()
    
    async def run_complete_demo(self):
        """Ejecuta la demostraci√≥n completa"""
        print("üéÆ DEMOSTRACI√ìN FINAL: MEMORIA PERFECTA")
        print("üî® El martillo que dejes hoy, estar√° ah√≠ en 6 meses")
        print("üß† Sistema que NUNCA olvida nada")
        
        await self.reset_world_if_needed()
        
        try:
            await self.demo_session_1()
            
            input("\n‚è∏Ô∏è Presiona Enter para continuar con la sesi√≥n 2...")
            
            await self.demo_session_2()
            
            input("\n‚è∏Ô∏è Presiona Enter para ver el an√°lisis de memoria...")
            
            await self.show_memory_analysis()
            
            print("\n" + "=" * 60)
            print("üéâ DEMOSTRACI√ìN COMPLETADA")
            print("=" * 60)
            print("‚úÖ Memoria perfecta demostrada:")
            print("   üî® El martillo est√° exactamente donde lo dejaste")
            print("   üóùÔ∏è La llave sigue en su ubicaci√≥n original")
            print("   ‚è∞ Los objetos se han oxidado con el tiempo")
            print("   üìú Cada movimiento qued√≥ registrado permanentemente")
            print("   üß† La IA tiene acceso a todo el historial")
            print("\nüí° Esto funciona igual despu√©s de d√≠as, semanas o meses!")
            
        except KeyboardInterrupt:
            print("\n\nüëã Demo interrumpida por el usuario")
        except Exception as e:
            print(f"\n‚ùå Error en demo: {e}")

class MockOllamaForDemo:
    """IA simulada para la demostraci√≥n"""
    
    async def generate(self, model, prompt, system=None):
        prompt_lower = prompt.lower()
        
        if "mirar" in prompt_lower:
            if "biblioteca" in system.lower() if system else False:
                return "En la biblioteca ves estanter√≠as llenas de libros antiguos. En el suelo, un martillo del herrero descansa donde alguien lo dej√≥."
            elif "entrada" in system.lower() if system else False:
                return "Est√°s en la entrada del castillo. En el suelo ves una llave oxidada que brilla d√©bilmente."
            else:
                return "Observas cuidadosamente el entorno, notando cada detalle de esta ubicaci√≥n hist√≥rica."
        
        elif "examinar" in prompt_lower:
            if "martillo" in prompt_lower:
                return "El martillo del herrero muestra signos de uso y tiempo. El √≥xido ha avanzado desde la √∫ltima vez que lo viste, pero sigue siendo funcional."
            elif "llave" in prompt_lower:
                return "La llave oxidada ha acumulado m√°s √≥xido desde que la dejaste aqu√≠. El tiempo ha dejado su marca en el metal."
            else:
                return "Examinas el objeto con atenci√≥n, notando c√≥mo ha cambiado con el tiempo."
        
        elif "tomar" in prompt_lower:
            return "Tomas el objeto cuidadosamente. Sientes su peso familiar y notas los cambios que el tiempo ha causado."
        
        elif "dejar" in prompt_lower:
            return "Colocas el objeto cuidadosamente en esta ubicaci√≥n. Quedar√° aqu√≠, esperando tu regreso."
        
        elif "inventario" in prompt_lower:
            return "Revisas tu inventario, sintiendo el peso de los objetos que llevas contigo."
        
        elif "ir" in prompt_lower:
            return "Te desplazas hacia la direcci√≥n indicada, explorando este mundo persistente."
        
        else:
            return "Respondes al comando, sabiendo que cada acci√≥n queda registrada en la memoria perfecta del mundo."
    
    async def close(self):
        pass

async def main():
    demo = FinalDemo()
    await demo.run_complete_demo()

if __name__ == "__main__":
    asyncio.run(main())
